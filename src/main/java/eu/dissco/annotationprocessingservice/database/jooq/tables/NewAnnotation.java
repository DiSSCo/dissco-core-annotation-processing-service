/*
 * This file is generated by jOOQ.
 */
package eu.dissco.annotationprocessingservice.database.jooq.tables;


import eu.dissco.annotationprocessingservice.database.jooq.Keys;
import eu.dissco.annotationprocessingservice.database.jooq.Public;
import eu.dissco.annotationprocessingservice.database.jooq.tables.records.NewAnnotationRecord;
import java.time.Instant;
import java.util.Collection;
import java.util.UUID;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewAnnotation extends TableImpl<NewAnnotationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.new_annotation</code>
     */
    public static final NewAnnotation NEW_ANNOTATION = new NewAnnotation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NewAnnotationRecord> getRecordType() {
        return NewAnnotationRecord.class;
    }

    /**
     * The column <code>public.new_annotation.id</code>.
     */
    public final TableField<NewAnnotationRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.version</code>.
     */
    public final TableField<NewAnnotationRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.type</code>.
     */
    public final TableField<NewAnnotationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.annotation_hash</code>.
     */
    public final TableField<NewAnnotationRecord, UUID> ANNOTATION_HASH = createField(DSL.name("annotation_hash"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.new_annotation.motivation</code>.
     */
    public final TableField<NewAnnotationRecord, String> MOTIVATION = createField(DSL.name("motivation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.mjr_job_id</code>.
     */
    public final TableField<NewAnnotationRecord, String> MJR_JOB_ID = createField(DSL.name("mjr_job_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.new_annotation.batch_id</code>.
     */
    public final TableField<NewAnnotationRecord, UUID> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.new_annotation.creator_id</code>.
     */
    public final TableField<NewAnnotationRecord, String> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.created</code>.
     */
    public final TableField<NewAnnotationRecord, Instant> CREATED = createField(DSL.name("created"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.modified</code>.
     */
    public final TableField<NewAnnotationRecord, Instant> MODIFIED = createField(DSL.name("modified"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.last_checked</code>.
     */
    public final TableField<NewAnnotationRecord, Instant> LAST_CHECKED = createField(DSL.name("last_checked"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.tombstoned_on</code>.
     */
    public final TableField<NewAnnotationRecord, Instant> TOMBSTONED_ON = createField(DSL.name("tombstoned_on"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.new_annotation.target_id</code>.
     */
    public final TableField<NewAnnotationRecord, String> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.new_annotation.data</code>.
     */
    public final TableField<NewAnnotationRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB, this, "");

    private NewAnnotation(Name alias, Table<NewAnnotationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NewAnnotation(Name alias, Table<NewAnnotationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.new_annotation</code> table reference
     */
    public NewAnnotation(String alias) {
        this(DSL.name(alias), NEW_ANNOTATION);
    }

    /**
     * Create an aliased <code>public.new_annotation</code> table reference
     */
    public NewAnnotation(Name alias) {
        this(alias, NEW_ANNOTATION);
    }

    /**
     * Create a <code>public.new_annotation</code> table reference
     */
    public NewAnnotation() {
        this(DSL.name("new_annotation"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<NewAnnotationRecord> getPrimaryKey() {
        return Keys.NEW_ANNOTATION_PK;
    }

    @Override
    public NewAnnotation as(String alias) {
        return new NewAnnotation(DSL.name(alias), this);
    }

    @Override
    public NewAnnotation as(Name alias) {
        return new NewAnnotation(alias, this);
    }

    @Override
    public NewAnnotation as(Table<?> alias) {
        return new NewAnnotation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewAnnotation rename(String name) {
        return new NewAnnotation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewAnnotation rename(Name name) {
        return new NewAnnotation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewAnnotation rename(Table<?> name) {
        return new NewAnnotation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewAnnotation where(Condition condition) {
        return new NewAnnotation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewAnnotation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewAnnotation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewAnnotation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewAnnotation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewAnnotation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewAnnotation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NewAnnotation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewAnnotation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NewAnnotation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
