/*
 * This file is generated by jOOQ.
 */
package eu.dissco.annotationprocessingservice.database.jooq.tables;


import eu.dissco.annotationprocessingservice.database.jooq.Keys;
import eu.dissco.annotationprocessingservice.database.jooq.Public;
import eu.dissco.annotationprocessingservice.database.jooq.tables.records.AnnotationBatchRecordRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnnotationBatchRecord extends TableImpl<AnnotationBatchRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.annotation_batch_record</code>
     */
    public static final AnnotationBatchRecord ANNOTATION_BATCH_RECORD = new AnnotationBatchRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationBatchRecordRecord> getRecordType() {
        return AnnotationBatchRecordRecord.class;
    }

    /**
     * The column <code>public.annotation_batch_record.batch_id</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, UUID> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.annotation_batch_record.creator_id</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, String> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.annotation_batch_record.generator_id</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, String> GENERATOR_ID = createField(DSL.name("generator_id"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.annotation_batch_record.parent_annotation_id</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, String> PARENT_ANNOTATION_ID = createField(DSL.name("parent_annotation_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.annotation_batch_record.created_on</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, Instant> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.annotation_batch_record.last_updated</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, Instant> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.annotation_batch_record.job_id</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, String> JOB_ID = createField(DSL.name("job_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.annotation_batch_record.batch_quantity</code>.
     */
    public final TableField<AnnotationBatchRecordRecord, Long> BATCH_QUANTITY = createField(DSL.name("batch_quantity"), SQLDataType.BIGINT, this, "");

    private AnnotationBatchRecord(Name alias, Table<AnnotationBatchRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnnotationBatchRecord(Name alias, Table<AnnotationBatchRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.annotation_batch_record</code> table
     * reference
     */
    public AnnotationBatchRecord(String alias) {
        this(DSL.name(alias), ANNOTATION_BATCH_RECORD);
    }

    /**
     * Create an aliased <code>public.annotation_batch_record</code> table
     * reference
     */
    public AnnotationBatchRecord(Name alias) {
        this(alias, ANNOTATION_BATCH_RECORD);
    }

    /**
     * Create a <code>public.annotation_batch_record</code> table reference
     */
    public AnnotationBatchRecord() {
        this(DSL.name("annotation_batch_record"), null);
    }

    public <O extends Record> AnnotationBatchRecord(Table<O> child, ForeignKey<O, AnnotationBatchRecordRecord> key) {
        super(child, key, ANNOTATION_BATCH_RECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AnnotationBatchRecordRecord> getPrimaryKey() {
        return Keys.ANNOTATION_BATCH_PK;
    }

    @Override
    public List<ForeignKey<AnnotationBatchRecordRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOTATION_BATCH_RECORD__ANNOTATION_BATCH_FK);
    }

    private transient MasJobRecord _masJobRecord;

    /**
     * Get the implicit join path to the <code>public.mas_job_record</code>
     * table.
     */
    public MasJobRecord masJobRecord() {
        if (_masJobRecord == null)
            _masJobRecord = new MasJobRecord(this, Keys.ANNOTATION_BATCH_RECORD__ANNOTATION_BATCH_FK);

        return _masJobRecord;
    }

    @Override
    public AnnotationBatchRecord as(String alias) {
        return new AnnotationBatchRecord(DSL.name(alias), this);
    }

    @Override
    public AnnotationBatchRecord as(Name alias) {
        return new AnnotationBatchRecord(alias, this);
    }

    @Override
    public AnnotationBatchRecord as(Table<?> alias) {
        return new AnnotationBatchRecord(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationBatchRecord rename(String name) {
        return new AnnotationBatchRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationBatchRecord rename(Name name) {
        return new AnnotationBatchRecord(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationBatchRecord rename(Table<?> name) {
        return new AnnotationBatchRecord(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, Instant, Instant, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
