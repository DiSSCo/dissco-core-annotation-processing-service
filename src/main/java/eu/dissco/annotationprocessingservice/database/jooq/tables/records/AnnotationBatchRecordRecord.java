/*
 * This file is generated by jOOQ.
 */
package eu.dissco.annotationprocessingservice.database.jooq.tables.records;


import eu.dissco.annotationprocessingservice.database.jooq.tables.AnnotationBatchRecord;
import java.time.Instant;
import java.util.UUID;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnnotationBatchRecordRecord extends UpdatableRecordImpl<AnnotationBatchRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.annotation_batch_record.batch_id</code>.
     */
    public void setBatchId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.annotation_batch_record.batch_id</code>.
     */
    public UUID getBatchId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.annotation_batch_record.creator_id</code>.
     */
    public void setCreatorId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.annotation_batch_record.creator_id</code>.
     */
    public String getCreatorId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.annotation_batch_record.created_on</code>.
     */
    public void setCreatedOn(Instant value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.annotation_batch_record.created_on</code>.
     */
    public Instant getCreatedOn() {
        return (Instant) get(2);
    }

    /**
     * Setter for <code>public.annotation_batch_record.last_updated</code>.
     */
    public void setLastUpdated(Instant value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.annotation_batch_record.last_updated</code>.
     */
    public Instant getLastUpdated() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>public.annotation_batch_record.job_id</code>.
     */
    public void setJobId(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.annotation_batch_record.job_id</code>.
     */
    public String getJobId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.annotation_batch_record.batch_quantity</code>.
     */
    public void setBatchQuantity(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.annotation_batch_record.batch_quantity</code>.
     */
    public Long getBatchQuantity() {
        return (Long) get(5);
    }

    /**
     * Setter for
     * <code>public.annotation_batch_record.parent_annotation_id</code>.
     */
    public void setParentAnnotationId(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>public.annotation_batch_record.parent_annotation_id</code>.
     */
    public String getParentAnnotationId() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AnnotationBatchRecordRecord
     */
    public AnnotationBatchRecordRecord() {
        super(AnnotationBatchRecord.ANNOTATION_BATCH_RECORD);
    }

    /**
     * Create a detached, initialised AnnotationBatchRecordRecord
     */
    public AnnotationBatchRecordRecord(UUID batchId, String creatorId, Instant createdOn, Instant lastUpdated, String jobId, Long batchQuantity, String parentAnnotationId) {
        super(AnnotationBatchRecord.ANNOTATION_BATCH_RECORD);

        setBatchId(batchId);
        setCreatorId(creatorId);
        setCreatedOn(createdOn);
        setLastUpdated(lastUpdated);
        setJobId(jobId);
        setBatchQuantity(batchQuantity);
        setParentAnnotationId(parentAnnotationId);
        resetChangedOnNotNull();
    }
}
